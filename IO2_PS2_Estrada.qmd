---
title:  IO2 PS2 Bresnahan and Reiss (1991)
author:
  - name: Carlos T. Estrada Arzamendi
date: today
date-format: long
format:
    html:
         theme: darkly
         code-fold: true
         code-tools: true
         echo: true
    pdf:
        geometry:
          - headheight = 0 in
          - top =  1in
          - left = 0.8in
          - right =  0.8in
          - heightrounded
        colorlinks: true
        keep-tex: true
        papersize: a4
        linestretch: 1.25
        echo: false
code-line-numbers: true
fig-align: center
editor: visual
---

```{r r.setup, include=FALSE}
rm(list = ls())
library(data.table)
library(stargazer)
library(ggplot2)
library(modelsummary)
library(dplyr)

library(knitr)
library(kableExtra)

set.seed(123)
options(digits = 5, scipen = 5)
```

# Problem 1 :

> Reproduce the results for the tire dealers reported in Table 4 of the paper. Note that Bresnahan and Reiss (1991) estimate the model imposing the constraints $\alpha_n \geq 0$ and $\gamma_n \geq 0$. You should impose the same constraints.

```{r data}
# Reading Data
data = as.data.table(read.csv("ps2.csv"))
```

## Reproducing Figure 2 to get to know the data

```{r figure2, out.width = "76%", fig.align = 'center', fig.cap = "Number of towns by town population"}
# Create the break values
breaks = c(seq(0, 7.5, by = 0.5), Inf)

# Bin the 'TPOP' column into intervals
df = data %>%
  mutate(TPOP_binned = cut(TPOP, breaks = breaks, right = FALSE))

# Count the number of values in each bin and plot
bin_counts = df %>%
  count(TPOP_binned)

# Plot
ggplot(bin_counts, aes(x = TPOP_binned, y = n, width = 0.7)) +
    geom_bar(stat = "identity", fill = "black", alpha = 0.8) +
    labs(
        x = "Town Population Range (000's)",
        y = "Number of Towns",
      )
```

\newpage

## Reproducing Table 3 to get to know the data

```{r table3}
#| tbl-cap: "Replication of Table 3"
datasummary_skim(data, out = "markdown", histogram = F)
```

## Main Task: Replication of Table 4

```{r prelim}
# Create Preliminary Functions V, S, F, Pi_bar

# Per-Capita Variable Profits
V = function(x, N, alpha, beta){
    v = alpha[1] + beta[1]*x$ELD + beta[2]*x$PINC + beta[3]*x$LNHDD +
        beta[4]*x$FFRAC - ifelse(N>1, sum(alpha[2:min(N,5)]), 0)
    return(v)
}

# Market Size
S = function(x, lambda){
    s = x$TPOP + lambda[1]*x$OPOP + lambda[2]*x$NGRW + lambda[3]*x$PGRW + 
        lambda[4]*x$OCTY
    return(s)
}

# Fixed Costs
F = function(x, N, gamma){
    f = gamma[1] + gamma[6]*x$LANDV + ifelse(N>1, sum(gamma[2:min(N,5)]), 0)
    
}

# Profits
Pi_bar = function(x, N, alpha, beta, gamma, lambda){
    p = S(x,lambda)*V(x, N, alpha, beta) - F(x, N, gamma)
    return(p)
}

```

```{r loglike}
# Create Log-Likelihood Function

loglike = function(par, x){
    
    # Setting parameters
    lambda = par[1:4]  #4
    beta = par[5:8]    #4
    alpha = par[9:13]  #5
    gamma = par[14:19] #6

    # Profit for N firms
    Pi_bar0 = Pi_bar(x, 0, alpha, beta, gamma, lambda) # no firms
    Pi_bar1 = Pi_bar(x, 1, alpha, beta, gamma, lambda) # 1 firm
    Pi_bar2 = Pi_bar(x, 2, alpha, beta, gamma, lambda) # 2 firm
    Pi_bar3 = Pi_bar(x, 3, alpha, beta, gamma, lambda) # 3 firms
    Pi_bar4 = Pi_bar(x, 4, alpha, beta, gamma, lambda) # 4 firms
    Pi_bar5 = Pi_bar(x, 5, alpha, beta, gamma, lambda) # 5+ firms
    
    # Initializing probabilities
    Probs = data.frame(matrix(ncol = 6, nrow = nrow(data)))
    
    
    # Probabilities of 0-5+ entrants for each of the 202 markets
    Probs[,1] = 1 - pnorm(Pi_bar1)             # no entrants
    Probs[,2] = pnorm(Pi_bar1) - pnorm(Pi_bar2) # 1 entrant
    Probs[,3] = pnorm(Pi_bar2) - pnorm(Pi_bar3) # 2 entrant
    Probs[,4] = pnorm(Pi_bar3) - pnorm(Pi_bar4) # 3 entrants
    Probs[,5] = pnorm(Pi_bar4) - pnorm(Pi_bar5) # 4 entrants
    Probs[,6] = pnorm(Pi_bar5)                 # 5+ entrants

    # Log Likelihood
    L = 0
    for(market in 1:nrow(x)){
        n_index = min(x$TIRE[market],5)+1
        prob = Probs[market, n_index]
        #print(prob)
        lprob = log(prob)
        lprob = max(lprob, -100000000)
        L = L + lprob
    }

    return(L)
}

test_par = c(
    lambda = c(0,  0,  0,  0),
    beta   = c(0,  0,  0,  0),
    alpha  = c(0,  0,  0,  0,  0),
    gamma  = c(0,  0,  0,  0,  0,  0)
   )

#sprintf("%.7f", loglike(test_par,data))

```

I found that the results obtained from the optimization are highly dependent on the starting values:

1.  Starting far from the results found from BR1991, the optimizer finds a set of parameters that has a lower Likelihood than the true parameters (using the same likelihood function), despite the BR1991 parameters being in the support.

2.  Starting a the vector of estimates shown in BR19991, I get results that appear correct.

This take me to believe the R optimizer I am using is the root to the discrepancy.

```{r maxloglike}
# MLE Optimization

# For Benchmark
true_par = c(
    true_lambda = c(-0.53,  2.25,  0.34,   0.23),
    true_beta   = c(-0.49, -0.03,  0.004, -0.02),
    true_alpha  = c(0.86,   0.03,  0.15,   0,     0.08),
    true_gamma  = c(0.53,   0.76,  0.46,   0.6,   0.12,  -0.74)
   )
trueloglike = loglike(true_par, data)

# Starting Parameters
par_0 = c(
  lambda = rep(0.1, 4),  
  beta   = rep(0.1, 4),    
  alpha  = rep(0.1, 5),   
  gamma  = rep(0.1, 5),
  gamma_L = 0.1
)

# Set the lower bounds for alpha and gamma
lower_bounds = c(
  rep(-Inf, 8),  # No lower bounds for lambda 1-4 and beta 1-4
  rep(0, 10),    # Lower bound of 0 for alpha 1-5 and gamma 1-5
  -Inf           # No lower bound for gamma_L
)

upper_bounds = rep(Inf, 19)

estimates_far = optim(
  par_0,
  loglike,
  x = data,
  method = "L-BFGS-B",
  lower = lower_bounds,
  upper = upper_bounds,
  control = list(fnscale = -1) # for maximization
)

estimates_close = optim(
  true_par,
  loglike,
  x = data,
  method = "L-BFGS-B",
  lower = lower_bounds,
  upper = upper_bounds,
  control = list(fnscale = -1) # for maximization
)

```

```{r results}
# Results
estimloglike_far = loglike(estimates_far$par, data)
estimloglike_close = loglike(estimates_close$par, data)

params = cbind(estimates_far$par, estimates_close$par, true_par)
params = rbind(params, c(estimloglike_far, estimloglike_close, trueloglike))
rownames(params)[20] = "Log Likelihood"

kable(params, col.names = c("Parameter", "Estimate (Far Start)","Estimate (BR1991 Start)", "BR1991 Estimate"),
      caption = "MLE Parameter Estimates")
```